=========
Tutorial
=========

.. _cosima gitlab repository: https://gitlab.com/mosaik/examples/cosima
.. _OMNeT’s website: https://docs.omnetpp.org/tutorials/tictoc/

In this tutorial, you will be guided through multiple examples, on how cosima integrates the (communication) simulator
OMNeT++ into the co-simulation framework mosaik and on how to set up your own scenarios and simulators.
The goal is to provide a basic understanding on how agents communicate within the simulation,
as well as showing how agents are connected to mosaik through a simple scenario.

The tutorial is based on scenarios, which you can find under ``cosima_core/scenarios/tutorial/`` in the official
`cosima gitlab repository`_.
To check if your installation (for details see ``README.md``) was successful,
you can run ``cosima_core/scenarios/tutorial/simulators_and_connection_to_omnet.py``.

However, this requires a basic understanding of how ONNeT++ works.
Therefore, it is recommended, that new users first try out the TicToc example from `OMNeT’s website`_.
Additionally, this tutorial will later provide an optional part, that will focus on the configuration and creation of a
simple network, that can be used to test our scenario.
In addition to knowledge of OMNeT++, it is advised to have a basic understanding of the programming language python.

Part 1: Simulators and connection to OMNeT++
============================================
The first part of the tutorial is about learning the configuration of a simple scenario
and the implementation of an agent simulator by means of an example.
The util functions provided by cosima for simplification purposes are not used here yet,
in order to learn the general functionality first.

Create a simple Agent
---------------------

**Initialization**

The Process of managing messages is realised by entities of agents.
That means, to send and receive messages, we first have to create an agent, that is capable of doing so.
To do that, first create a python file under ``cosima_core/simulators`` named ``agent_simulator.py``.
Next put the following lines into that file:

.. code-block:: python
    :linenos:

    import mosaik_api

    META = {
        'api_version': '3.0',
        'type': 'event-based',
        'models': {
            'SimpleAgentModel': {
                'public': True,
                'params': [],
                'attrs': ['message'],
            },
        },
    }

    class SimpleAgent(mosaik_api.Simulator):
        def __init__(self):
            super().__init__(META)
            self._sid = None
            self._client_name = None
            self._msg_counter = 0
            self._outbox = []
            self._output_time = 0
            self._neighbor = None
            self._connection_attr = None

        def init(self, sid, **sim_params):
            self._sid = sid
            self._connection_attr = sim.params.get(“connect_attr”)
            if 'client_name' in sim_params.keys():
                self.meta['models']['SimpleAgentModel']['attrs'].append(f'{self.connect_attr}{sim_params["client_name"]}')
                self._client_name = sim_params['client_name']
            if 'neighbor' in sim_params.keys():
                self._neighbor = sim_params['neighbor']
            return META

.. _mosaik simulator: https://mosaik.offis.de/docs/

Inside the file, we first must make sure that we include the mosaik api, because the agent is based on an `mosaik simulator`_.
The variable META defines the general information about the agent.
The string api_version defines which version of mosaik is used for the agent. For this Tutorial version 3.0 is used.
The type specifies, how the simulator advances through time.
In cosima this will be event-based. The model is defined with a simple attribute to store messages.

The variables in the ``__init__`` are storing the following data:

.. note::

    sid = ID of the simulation

    client_name = name of the agent in the scenario

    msg_counter = counts the number of messages send

    outbox = stores the messages

    output_time = time where the message got send

    neighbor = Reciever of the message

    connection_attr = attribute which is exchanged between CommunicationSim and Agents

The ``init()`` Method initializes the simulator with the corresponding ID and simulation parameters, that are sent by mosaik.

**The step method**

The step method is called every time the next step for a given time should be performed.
But before we can step an agent, we have to create a number of instances of the given model.
To do that, insert the following method into the python file.

.. code-block:: python
    :linenos:

    def create(self, num, model, **model_conf):
        return [{'eid': self._sid, 'type': model}]

The Method gets the number of models as well as its parameters and returns a list of dictionaries, each with their own entity ID (eid).

Now we can implement the actual ``step`` method:

.. code-block:: python
    :linenos:

    def step(self, time, inputs, max_advance):
        log(f'{self._client_name} received input {inputs}')
        content = 'Hi neighbor!'
        self._outbox.append({'msg_id': f'{self._client_name}_{self._msg_counter}',
                             'max_advance': max_advance,
                             'sim_time': time + 1,
                             'sender': self._client_name,
                             'receiver': self._neighbor,
                             'content': content,
                             'creation_time': time,
                             })
        self._msg_counter += 1
        self._output_time = time + 1
        return None

For our simple simulation, we just want the agent to queue the message “Hi neighbor” to another participant, whenever he steps.
To do that, we just append our message, that we defined in the variable content, within a dictionary, to the agent’s outbox.
The dictionary contains all the important information, that the simulation needs to send the message to the right client.
The variable max_advance sets a time boundary of how far the simulation can advance, without going out of sync with the OMNeT++ Simulation component.
That means, that no external step, will be performed within the given timeframe.

To inform the user when a message is sent, we additionally use a helper function, that is implemented in cosima.
To import it, you can simply add the following line, to the top, of the file:

.. code-block:: python
    :linenos:

    from cosima_core.util.util_functions import log

Next up is a function called ``get_data``. The function collects the messages in the outbox, so that they can be send by mosaik.

.. code-block:: python
    :linenos:

    def get_data(self, outputs):
        data = {}
        if self._outbox:
            data = {self._sid: {f'message': self._outbox}, 'time': self._output_time}
            self._outbox = []
        return data

The last function, that we going to use in our sample agent, is called finalize.
Normally this function is used, to clean up external processes.
However, in our case that is not necessary, so we just use it to print the information, that the agent is finished, on the console with our log function.

.. code-block:: python
    :linenos:

    def finalize(self):
        log('Finalize SimpleAgent')

With this, we now have a simple agent, that can send a basic string as a message.
Next, we are going to implement a little scenario, that uses this agent.

Download File: :download:`agent_simulator.py <downloads/agent_simulator.py>`

Build a basic scenario
----------------------

**Configuration and Parameters**

Now that we got our agent, we can use it in a simple scenario, that will create two entities of that agent as so-called clients.
By the end of the simulation, these clients will both send a message to one another, with our defined content.
First up we will demonstrate, how to configure our simulation and what parameters to set.
To do that create a new file called ``tutorial_scenario.py`` in the ``cosima_core`` directory and copy these lines into it:

.. code-block:: python
    :linenos:

    import cosima_core.util.general_config as cfg

    SIMULATION_END = 10
    START_MODE = 'cmd'
    NETWORK = 'TutorialNetwork'
    CONTENT_PATH = cfg.ROOT_PATH / 'simulators' / 'tic_toc_example' / 'content.csv'

    SIM_CONFIG = {
        'SimpleAgent': {
            'python': 'cosima_core.simulators.tutorial.simple_agent_simulator:SimpleAgent',
        },
        'CommunicationSimulator': {
            'python': 'cosima_core.simulators.communication_simulator:CommunicationSimulator',
        }
    }

The Variable ``PORT`` must be set to 4242, to connect the mosaik-scenario correctly to OMNeT++.
``SIMULATION_END`` defines the maximum time; the simulation can run.
For the ``START_MODE`` we have 3 viable options. If we set it to “ide”, we must run the OMNeT++ simulation separately before running the scenario.
If the mode “qtenv” is used, the OMNeT++ Simulation window will start automatically when running the scenario.
For now, we will set the start mode to “cmd” that will start the OMNeT++ simulation directly in the command line.
The variable ``NETWORK`` sets what network inside of the OMNeT++ Simulation will be used.
At last, we will define, what simulators (or Agents in our case) will be used and were to find them, with the variable ``SIM_CONFIG``.

Now that our simulation parameters are set, we next have to connect our scenario to OMNeT++ with the following lines:

.. code-block:: python
    :linenos:

    from cosima_core.util.util_functions import start_omnet, \
        check_omnet_connection, stop_omnet, \
        log
    omnet_process = start_omnet(START_MODE, NETWORK)
    check_omnet_connection(cfg.PORT)

Running this file, now should print a statement onto the console, that confirmes a positive connection to OMNeT++ like this:

.. code-block:: console
    :linenos:

    mosaik: 02:37:02:623449 Connection to OMNeT++ possible: True

**Connection to agents and mosaik**

In this step, we will implement the actual mosaik simulation.
We start by creating the mosaic World as well as mapping the attributes of our two clients:

.. code-block:: python
    :linenos:

    import mosaik

    world = mosaik.World(SIM_CONFIG, debug=True, time_resolution=0.001, cache=False)

    client_attribute_mapping = {
        'client0': 'message_with_delay_for_client0',
        'client1': 'message_with_delay_for_client1'
    }

With this, now both simulations can be running simultaneously and in sync.
Now we can add and start our clients by instantiate our agents:

.. code-block:: python
    :linenos:

    simple_agent_1 = world.start('SimpleAgent',
                                 content_path=CONTENT_PATH,
                                 client_name='client0',
                                 neighbor='client1'
                                 connection_attr=’message_with_delay_for_’).SimpleAgentModel()

    simple_agent_2 = world.start('SimpleAgent',
                                 content_path=CONTENT_PATH,
                                 client_name='client1',
                                 neighbor='client0'
                                 connection_attr=’message_with_delay_for_’).SimpleAgentModel()

    comm_sim = world.start('CommunicationSimulator',
                           step_size=1,
                           port=cfg.PORT,
                           client_attribute_mapping=client_attribute_mapping).CommunicationModel()

This will call the ``create`` and ``init`` functions, we created in our agent implementation and thereby setting up the clients with our defined messages.
Even though we just want to use our two clients in our scenario, we actually have to set up one more Simulator, the so called CommunicationSimulator.
The CommunicationSimulator synchronizes the schedulers between OMNeT++ and mosaik and manages the step methods for the other simulators.
Therefore, it is essential to add it to our simulation above the world.connect statements, that are implemented as followed:

.. code-block:: python
    :linenos:

    world.connect(simple_agent_1, comm_sim, f'message', weak=True)
    world.connect(comm_sim, simple_agent_1, client_attribute_mapping['client0'])
    world.connect(simple_agent_2, comm_sim, f'message', weak=True)
    world.connect(comm_sim, simple_agent_2, client_attribute_mapping['client1'])

Running the simulation should print out the starting process of our agents:

.. code-block:: console
    :linenos:

    Starting “SimpleAgent” as “SimpleAgent-0” …
    Starting “SimpleAgent” as “SimpleAgent-1” …
    Starting “CommunicationSimulator” as “CommunicationSimulator -0” …

Now that everything is configured and set up, we can run our simulation by calling the run function of our mosaik world.
The simulation will automatically start the process until the given end time is reached.
When the simulation is finished, we have to make sure, that the connection to the OMNeT++ simulation is closed:

.. code-block:: python
    :linenos:

    log(f'run until {SIMULATION_END}')
    world.run(until=SIMULATION_END)
    log("end of process")
    sleep(5)
    stop_omnet(omnet_process)

Running our simulation should result in a simple message transfer from client0 to client1.
The console will display the content of the message like this.

.. code-block:: console
    :linenos:

    mosaik:  03:18:41:106397 Communication Simulator steps in 1 with input
    [({'msg_id': 'client0_0', 'max_advance': 10000, 'sim_time': 1, 'sender': 'client0', 'receiver': 'client1', 'content':
    'Hi neighbor!', 'creation_time': 0}, <class 'messages.message_pb2.InfoMessage'>)]

With this, our scenario is ready. Next up, we will implement a little example network inside of OMNeT++ to demonstrate
how messages are transported on OMNeT’s side and how both simulators communicate with each other.


Download File: :download:`simple_scenario.py <downloads/simple_scenario.py>`

Create a simple Network in OMNeT++
----------------------------------

Now that we created our scenario, it is time to implement a Simulation inside of OMNeT++, so we can see how the communication between the clients are realised.
To do that first we are creating a ned file, that stores the information about all our components.
Additionally, we also are going to need a .ini file, that holds our simulation parameters and sets up the connection between OMNeT++ and cosima.

**Creating the NED file**

In this step, we are creating the simplest Network possible, that matches the components of our basic scenario.
First, create a new NED file in the networks folder of our project inside of OMNeT++, by right clicking it and choosing ``New -> Network Description File (NED)`` and name it ``TutorialNetwork.ned``.
Click on the Source Tab in the bottom left corner, to get into the Source Mode and paste the following Code into it.

.. code-block:: python
    :linenos:

    package networks;

    import modules.MosaikSchedulerModule;
    import inet.networklayer.configurator.ipv4.Ipv4NetworkConfigurator;

    network TutorialNetwork
    {
        @display("bgb=500,500");

        submodules:
            schedulerModule: MosaikSchedulerModule {
                @display("p=60,40");
            }
            configurator: Ipv4NetworkConfigurator {
                @display("p=180,40");
            }
    }

This creates a simple Environment, that has all the components, to set up our Mosaik connection in the Network.
The MosaikSchedulerModule is mandatory, to schedule the events, specifically the max advance events, that ensures the synchronisation between the Frameworks.
The ipv4NetworkConfigurator is used, to assign ipv4 addresses and manage the routing process of the network.
Now we have to add our clients and connect them. Enhance the code, so that it looks like this.

.. code-block:: python
    :linenos:

    package networks;

    import modules.MosaikSchedulerModule;
    import inet.networklayer.configurator.ipv4.Ipv4NetworkConfigurator;
    import inet.node.inet.StandardHost;
    import inet.node.ethernet.Eth10M;

    network TutorialNetwork
    {
        @display("bgb=500,500");

        submodules:
            schedulerModule: MosaikSchedulerModule {
                @display("p=60,40");
            }
            configurator: Ipv4NetworkConfigurator {
                @display("p=180,40");
            }
            client0: StandardHost {
                @display("p=120,240");
            }
            client1: StandardHost {
                @display("p=380,240");
            }

        connections:
            client0.ethg++ <--> Eth10M <--> client1.ethg++;
    }

The clients are represented as StandardHosts and MUST have the same name, as the agents in the scenario.
They are connected by a 10MB/Sec Ethernet connection. If you change into Design Mode, it should look like this.

.. image:: images/network1.png
    :alt: Two clients connected by Ethernet

**Configuration of the .ini file**

To use our new network, we have to include it in the mosaik.ini file, that is located outermost layer of our project structure.
You can either add a new configuration to the mosaik.ini file or make your own.
To start the simulation environment, the mosaik.ini has to contain the following content.

.. code-block:: ini
    :linenos:

    [General]
    network = networks.TutorialNetwork

    scheduler-class = "MosaikScheduler"

    *.*.ipv4.arp.typename = "GlobalArp"
    *.*.ipv4.routingTable.netmaskRoutes = ""
    *.configurator.optimizeRoutes = false

    *.client*.numApps = 1
    *.client*.app[*].typename = "AgentAppTcp"
    *.client0.app[0].localPort = 7000
    *.client1.app[0].localPort = 8000

The Code first ensures, that we are using the network we previously created.
By setting the scheduler-class, we register our MosaikScheduler.
Additionally, we set up some basic parameters for the clients, so they can communicate.

Before we can run our simulation, we have to ensure that the variable START_MODE in the sample_scenario.py is set to “ide”, so we can run the OMNeT++ Simulation separately.
Now we can finally test our simulation, by doing the following steps:

    1. Run the mosaik.ini in OMNeT++ by pressing the Run Button in the Editor
    2. Run sample_Scenario.py until the output of the first step is shown the console
    3. Press the run Button in the newly opened simulation runtime GUI of OMNeT++

You now should see that the clients are starting to send messages to each other for 10ms (Simulation time).

.. image:: images/network2.png
    :alt: The two clients sending messages

Download Files: :download:`TutorialNetwork.ned <downloads/TutorialNetwork.ned>` :download:`Mosaik.ini <downloads/Mosaik.ini>`

Enhancing the Simulation wih a Statistic-Tracker
------------------------------------------------

Now that we have our base scenario, we can enhance it in multiple ways wth new Agents and Networks. n this section, we
will introduce a new simulator into our scenario, that can track statistics (like package information) while the simulation
is running.

**Creating the tracking agent**

Our first step, is to create a new File with the basic structure we already introduces in the first section of this tutorial.

.. code-block:: python
    :linenos:

    META = {
        'api_version': '3.0',
        'models': {
            'Statistics': {
                'public': True,
                'params': [],
                'attrs': ['stats', 'message'],
            },
        }, 'type': 'time-based'}


    class StatisticsSimulator(mosaik_api.Simulator):
        def __init__(self):
            super().__init__(META)
            self._sid = None
            self.index = []
            self.stats = []
            self.network = ""
            self.path = None
            self.step_time = 0
            self.show_plots = True
            self.save_plots = False

        def init(self, sid, **sim_params):
            return META

        def create(self, num, model, **model_conf):
            return [{'eid': self._sid, 'type': model}]

        def step(self, time, inputs, max_advance):
            log(f'StatisticsSimulator steps in {time}. ', log_type='info')
            return time

        def get_data(self, outputs):
            data = {}
            if self.stats:
                data = {self._sid: {'stats': self.stats}}
            return data

        def finalize(self):
            log(f'Finalize StatisticsSimulator')

Because it is not possible to access the packet information in OMNeT++ directly through the port connection, we read in,
the file we data gets written into at runtime. To do that we enhance the init and step function, so that the simulator
automatically gets the currently available information out of the .vec file in OMNeT++.

.. code-block:: python
    :linenos:

        def init(self, sid, **sim_params):
            self._sid = sid
            self.path = Path(__file__).parents[2].joinpath('cosima_omnetpp_project/results/')

            if 'network' in sim_params:
                self.network = sim_params['network']

            return META

        def step(self, time, inputs, max_advance):
            log(f'StatisticsSimulator steps in {time}. ', log_type='info')

            vec_path = self.path.joinpath(f"{self.network}-#0.vec")

            with open(vec_path, 'r') as f:
                lines = f.readlines()[:-1]

            return time

Other simulators can access the data, that got read out of the .vec file, through the stats attribute. The next step is,
to implement a way for the user, to decide when this simulator gets stepped. The functionality will be controlled through
the variable step_time. If step_time equals 0, the simulator will only step once at the end of the simulation. For any
other value, it will determine, how many steps the simulator should wait, until it steps again.

.. code-block:: python
    :linenos:

        def init(self, sid, **sim_params):
            self._sid = sid
            self.path = Path(__file__).parents[2].joinpath('cosima_omnetpp_project/results/')

            if 'network' in sim_params:
                self.network = sim_params['network']

            if 'step_time' in sim_params:
                self.step_time = sim_params['step_time']

            return META

        def step(self, time, inputs, max_advance):
            log(f'StatisticsSimulator steps in {time}. ', log_type='info')
            if time == 0:
                if self.step_time == 0:
                    self.step_time = self.mosaik.world.until - 1
                    return self.step_time
                else:
                    return self.step_time
            self.stats = []
            self.index = []

            vec_path = self.path.joinpath(f"{self.network}-#0.vec")

            with open(vec_path, 'r') as f:
                lines = f.readlines()[:-1]

            return time + self.step_time

The next step is to implement our new simulator in the scenario.

Download File: :download:`simple_stat_simulator.py <downloads/simple_stat_simulator.py>`

**Enhance the scenario**

Just like the simulator, enhancing the scenario requires the same steps that were already introduced in our second part
of the tutorial. All we have todo is to add our new simulator to the SIM_CONFIG, start it and then connect it to our other
simulators, so that they can use the data if necessary.

.. code-block:: python
    :linenos:

    SIM_CONFIG = {
        'SimpleAgent': {
            'python': 'cosima_core.simulators.tutorial.simple_agent_simulator:SimpleAgent',
        },
        'CommunicationSimulator': {
            'python': 'cosima_core.simulators.communication_simulator:CommunicationSimulator',
        },
        'StatisticsSimulator': {
            'python': 'cosima_core.simulators.statistics_simulator:StatisticsSimulator',
        }
    }

    stat_sim = world.start('StatisticsSimulator', network=NETWORK, step_time=0).Statistics()

    world.connect(simple_agent_1, stat_sim, 'message', time_shifted=True, initial_data={'message': None})
    world.connect(stat_sim, simple_agent_1, 'stats')
    world.connect(stat_sim, simple_agent_2, 'stats')

With this our new simulator is already usable. But right now only other agents will be able to do anything with the data.
In the next section we will enhance the StatisticsSimulator, so that it will use the collected data at the end of the
simulation to provide diagrams.

Download File: :download:`extended_scenario.py <downloads/extended_scenario.py>`

**Analyse data**

To arrange the collected data, so that it is easy to use we first change the step function in the simulator as follows.

.. code-block:: python
    :linenos:

        def step(self, time, inputs, max_advance):
            log(f'StatisticsSimulator steps in {time}. ', log_type='info')
            if time == 0:
                if self.step_time == 0:
                    self.step_time = self.mosaik.world.until - 1
                    return self.step_time
                else:
                    return self.step_time
            self.stats = []
            self.index = []

            vec_path = self.path.joinpath(f"{self.network}-#0.vec")

            with open(vec_path, 'r') as f:
                lines = f.readlines()[:-1]

            for line in lines:
                if line.split(' ')[0] == 'vector' and line.strip():
                    client = line.split(' ')[2].split('.')[1]
                    vector = line.split(' ')[3].split(':')[0]
                    vec_id = line.split(' ')[1]
                    self.index.append({
                        'client': client,
                        'vector': vector,
                        'index': vec_id,
                    })
            f.close()

            for d in self.index:
                value_vec = []
                time_vec = []
                for line in lines:
                    if line.strip() and line.split()[0] == d['index']:
                        value_vec.append(float(line.split()[3]))
                        time_vec.append(float(line.split()[2]))

                if value_vec:
                    self.stats.append({
                        'client': d['client'],
                        'vector': d['vector'],
                        'value': value_vec,
                        'time': time_vec
                    })

            return time + self.step_time

Everytime the simulator steps, it will iterate through all of the collected data and arrange them into dictionary's, that
are stores in the stats variable. Every entry in this list will track what client it originates from, the name of the
collected stat, thw value of the vector-entries and at what simulation time they where collected. The variable index is a
helper-list, that makes it easier to iterate through the data. Next we will use take the arranged data, filter how many
packets each client sent and display it in a diagram. To do this, we will add a new function called calc_client_sent.

.. code-block:: python
    :linenos:

    import matplotlib.pyplot as plt

    def calc_client_sent(self):
        clients = []
        pkts = []

        for stats in self.stats:
            if stats['vector'] == 'packetSent':
                clients.append(stats['client'])
                pkts.append(len(stats['value']))

        fig, ax = plt.subplots()
        bar_container = ax.bar(clients, pkts)
        ax.set(ylabel='Number of Packets', title='Packets Sent')
        ax.grid(color='gray', linestyle='--', linewidth=0.5, axis='y')
        ax.bar_label(bar_container)

This function simply iterates through all of the our data and counts how many packet each client has sent. After the
packet-count is determined, we will simply plot the data with the matplotlib library.

.. code-block:: python
    :linenos:

    def finalize(self):
        log(f'Finalize StatisticsSimulator')

        self.calc_client_sent()
        plt.show()

Our new function will be called in the finalize method, so that it will be plotted once at the end of the simulation.
A packetSent-Plot for our example simulation should look like this.

.. image:: images/PacketSent.png
    :alt: packets that got sent by the clients

The last feature that we want to implement, is the ability to make the plotting optional and save them if necessary.
We extend the init method so that we can determine these options when initializing the simulator in the scenario.
Then we change the calc_client_sent function so that if our save_plots option is enabled, so plots gets saves in the
result folder.

.. code-block:: python
    :linenos:

    def init(self, sid, **sim_params):
        self._sid = sid
        self.path = Path(__file__).parents[2].joinpath('cosima_omnetpp_project/results/')

        if 'network' in sim_params:
            self.network = sim_params['network']

        if 'step_time' in sim_params:
            self.step_time = sim_params['step_time']

        if 'show_plots' in sim_params:
            self.show_plots = sim_params['show_plots']

        if 'save_plots' in sim_params:
            self.save_plots = sim_params['save_plots']

        return META

    def finalize(self):
        log(f'Finalize StatisticsSimulator')

        self.calc_client_sent()

        if self.show_plots:
            plt.show()

    def calc_client_sent(self):
        clients = []
        pkts = []

        for stats in self.stats:
            if stats['vector'] == 'packetSent':
                clients.append(stats['client'])
                pkts.append(len(stats['value']))

        fig, ax = plt.subplots()
        bar_container = ax.bar(clients, pkts)
        ax.set(ylabel='Number of Packets', title='Packets Sent')
        ax.grid(color='gray', linestyle='--', linewidth=0.5, axis='y')
        ax.bar_label(bar_container)
        if self.save_plots:
            plt.savefig('../results/PacketSent.png')

The last thing that we have to do, is enabling our options in the scenario. The show_plots option is enabled be default
but can be disabled here as well.

.. code-block:: python
    :linenos:

    stat_sim = world.start('StatisticsSimulator', network=NETWORK, save_plots=True, step_time=0).Statistics()

Download File: :download:`extended_stat_simulator.py <downloads/extended_stat_simulator.py>`

Part 2: Using the scenario helper and scenario configuration file
=================================================================

In cosima, the user is provided with several options to simplify the creation of scenarios.
In order to show these as an example, the tutorial scenario created previously will be modified in this part
with the help of these options.
The corresponding file can be found under ``cosima_core/scenarios/tutorial/02_scenario_helper_and_scenario_config.py``.

First, we introduce the ``ScenarioHelper`` class. The ``ScenarioHelper`` can be used in scenario files in order to
simplify the scenario generation.

Therefore, the previously created SIM_CONFIG can be simplified here to the extent that the CommunicationSimulator
no longer needs to be explicitly included.

.. code-block:: python
    :linenos:

    # Simulation configuration -> tells mosaik where to find the simulators
    SIM_CONFIG = {
        'SimpleAgent': {
            'python': 'cosima_core.simulators.tutorial.simple_agent_simulator:SimpleAgent',
        },
        'StatisticsSimulator': {
            'python': 'cosima_core.simulators.statistics_simulator:StatisticsSimulator',
        }
    }

Instead of this we now include the ``ScenarioHelper`` in the scenario by:

.. code-block:: python
    :linenos:

    scenario_helper = ScenarioHelper()
    world, communication_simulator, client_attribute_mapping, sim_config = \
    scenario_helper.prepare_scenario(sim_config=SIM_CONFIG)

The following part of the scenario stays the same, as it is specific to the implemented use case.
At the end of the scenario file you can use the ``ScenarioHelper`` again to run and shutdown your simulation by

.. code-block:: python
    :linenos:

    scenario_helper.run_simulation()
    scenario_helper.shutdown_simulation()

Also note, that we have now used the ``scenario_config.py`` for the configuration of the scenario.
In that config file you can specify parameters such as the number of communicating agents and the start mode of OMNeT++.