//
// Generated file, do not edit! Created by nedtool 5.6 from messages/MosaikCtrlEvent.msg.
//

#ifndef __MOSAIKCTRLEVENT_M_H
#define __MOSAIKCTRLEVENT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class MosaikCtrlEvent;
// cplusplus {{
#include "ControlType_m.h"
// }}

/**
 * Class generated from <tt>messages/MosaikCtrlEvent.msg:21</tt> by nedtool.
 * <pre>
 * packet MosaikCtrlEvent
 * {
 *     int ctrlType \@enum(ControlType);
 *     string source;
 *     string destination;
 *     int start;
 *     int stop;
 *     int interval;
 *     int packetLength;
 *     string moduleNames[];
 * }
 * </pre>
 */
class MosaikCtrlEvent : public ::omnetpp::cPacket
{
  protected:
    int ctrlType = 0;
    omnetpp::opp_string source;
    omnetpp::opp_string destination;
    int start = 0;
    int stop = 0;
    int interval = 0;
    int packetLength = 0;
    omnetpp::opp_string *moduleNames = nullptr;
    size_t moduleNames_arraysize = 0;

  private:
    void copy(const MosaikCtrlEvent& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MosaikCtrlEvent&);

  public:
    MosaikCtrlEvent(const char *name=nullptr, short kind=0);
    MosaikCtrlEvent(const MosaikCtrlEvent& other);
    virtual ~MosaikCtrlEvent();
    MosaikCtrlEvent& operator=(const MosaikCtrlEvent& other);
    virtual MosaikCtrlEvent *dup() const override {return new MosaikCtrlEvent(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCtrlType() const;
    virtual void setCtrlType(int ctrlType);
    virtual const char * getSource() const;
    virtual void setSource(const char * source);
    virtual const char * getDestination() const;
    virtual void setDestination(const char * destination);
    virtual int getStart() const;
    virtual void setStart(int start);
    virtual int getStop() const;
    virtual void setStop(int stop);
    virtual int getInterval() const;
    virtual void setInterval(int interval);
    virtual int getPacketLength() const;
    virtual void setPacketLength(int packetLength);
    virtual void setModuleNamesArraySize(size_t size);
    virtual size_t getModuleNamesArraySize() const;
    virtual const char * getModuleNames(size_t k) const;
    virtual void setModuleNames(size_t k, const char * moduleNames);
    virtual void insertModuleNames(const char * moduleNames);
    virtual void insertModuleNames(size_t k, const char * moduleNames);
    virtual void eraseModuleNames(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MosaikCtrlEvent& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MosaikCtrlEvent& obj) {obj.parsimUnpack(b);}

#endif // ifndef __MOSAIKCTRLEVENT_M_H

