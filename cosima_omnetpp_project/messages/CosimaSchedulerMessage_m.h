//
// Generated file, do not edit! Created by opp_msgtool 6.0 from messages/CosimaSchedulerMessage.msg.
//

#ifndef __COSIMASCHEDULERMESSAGE_M_H
#define __COSIMASCHEDULERMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class CosimaSchedulerMessage;
/**
 * Class generated from <tt>messages/CosimaSchedulerMessage.msg:1</tt> by opp_msgtool.
 * <pre>
 * packet CosimaSchedulerMessage
 * {
 *     string sender;
 *     string receiver;
 *     int size;
 *     string content;
 *     int delay;
 *     uint32_t sequenceNumber;
 *     string msgId;
 *     bool transmission_error;
 *     bool timeout = false;
 *     bool disconnected_event;
 *     bool reconnected_event;
 *     bool connection_change_successful;
 *     int creationTime;
 *     bool falsified = false;
 * }
 * </pre>
 */
class CosimaSchedulerMessage : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string sender;
    omnetpp::opp_string receiver;
    int size = 0;
    omnetpp::opp_string content;
    int delay = 0;
    uint32_t sequenceNumber = 0;
    omnetpp::opp_string msgId;
    bool transmission_error = false;
    bool timeout = false;
    bool disconnected_event = false;
    bool reconnected_event = false;
    bool connection_change_successful = false;
    int creationTime = 0;
    bool falsified = false;

  private:
    void copy(const CosimaSchedulerMessage& other);

  protected:
    bool operator==(const CosimaSchedulerMessage&) = delete;

  public:
    CosimaSchedulerMessage(const char *name=nullptr, short kind=0);
    CosimaSchedulerMessage(const CosimaSchedulerMessage& other);
    virtual ~CosimaSchedulerMessage();
    CosimaSchedulerMessage& operator=(const CosimaSchedulerMessage& other);
    virtual CosimaSchedulerMessage *dup() const override {return new CosimaSchedulerMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSender() const;
    virtual void setSender(const char * sender);

    virtual const char * getReceiver() const;
    virtual void setReceiver(const char * receiver);

    virtual int getSize() const;
    virtual void setSize(int size);

    virtual const char * getContent() const;
    virtual void setContent(const char * content);

    virtual int getDelay() const;
    virtual void setDelay(int delay);

    virtual uint32_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint32_t sequenceNumber);

    virtual const char * getMsgId() const;
    virtual void setMsgId(const char * msgId);

    virtual bool getTransmission_error() const;
    virtual void setTransmission_error(bool transmission_error);

    virtual bool getTimeout() const;
    virtual void setTimeout(bool timeout);

    virtual bool getDisconnected_event() const;
    virtual void setDisconnected_event(bool disconnected_event);

    virtual bool getReconnected_event() const;
    virtual void setReconnected_event(bool reconnected_event);

    virtual bool getConnection_change_successful() const;
    virtual void setConnection_change_successful(bool connection_change_successful);

    virtual int getCreationTime() const;
    virtual void setCreationTime(int creationTime);

    virtual bool getFalsified() const;
    virtual void setFalsified(bool falsified);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CosimaSchedulerMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CosimaSchedulerMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline CosimaSchedulerMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<CosimaSchedulerMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __COSIMASCHEDULERMESSAGE_M_H

