//
// Generated file, do not edit! Created by opp_msgtool 6.0 from messages/CustomTrafficChunk.msg.
//

#ifndef __CUSTOMTRAFFICCHUNK_M_H
#define __CUSTOMTRAFFICCHUNK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class CustomTrafficChunk;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
    const inet::B CHUNK_LENGTH; 
// }}

/**
 * Class generated from <tt>messages/CustomTrafficChunk.msg:8</tt> by opp_msgtool.
 * <pre>
 * class CustomTrafficChunk extends inet::FieldsChunk
 * {
 *     int msgId;
 *     string sender;
 *     int senderPort;
 *     string receiver;
 *     int receiverPort;
 *     int packetSize_B;
 *     int timeSend_ms;
 *     bool reply = false;
 *     int replyAfter = 100;
 * }
 * </pre>
 */
class CustomTrafficChunk : public ::inet::FieldsChunk
{
  protected:
    int msgId = 0;
    omnetpp::opp_string sender;
    int senderPort = 0;
    omnetpp::opp_string receiver;
    int receiverPort = 0;
    int packetSize_B = 0;
    int timeSend_ms = 0;
    bool reply = false;
    int replyAfter = 100;

  private:
    void copy(const CustomTrafficChunk& other);

  protected:
    bool operator==(const CustomTrafficChunk&) = delete;

  public:
    CustomTrafficChunk();
    CustomTrafficChunk(const CustomTrafficChunk& other);
    virtual ~CustomTrafficChunk();
    CustomTrafficChunk& operator=(const CustomTrafficChunk& other);
    virtual CustomTrafficChunk *dup() const override {return new CustomTrafficChunk(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMsgId() const;
    virtual void setMsgId(int msgId);

    virtual const char * getSender() const;
    virtual void setSender(const char * sender);

    virtual int getSenderPort() const;
    virtual void setSenderPort(int senderPort);

    virtual const char * getReceiver() const;
    virtual void setReceiver(const char * receiver);

    virtual int getReceiverPort() const;
    virtual void setReceiverPort(int receiverPort);

    virtual int getPacketSize_B() const;
    virtual void setPacketSize_B(int packetSize_B);

    virtual int getTimeSend_ms() const;
    virtual void setTimeSend_ms(int timeSend_ms);

    virtual bool getReply() const;
    virtual void setReply(bool reply);

    virtual int getReplyAfter() const;
    virtual void setReplyAfter(int replyAfter);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CustomTrafficChunk& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CustomTrafficChunk& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline CustomTrafficChunk *fromAnyPtr(any_ptr ptr) { return check_and_cast<CustomTrafficChunk*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CUSTOMTRAFFICCHUNK_M_H

