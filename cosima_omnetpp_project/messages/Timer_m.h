//
// Generated file, do not edit! Created by opp_msgtool 6.0 from messages/Timer.msg.
//

#ifndef __TIMER_M_H
#define __TIMER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Timer;
// cplusplus {{
#include "TimerType_m.h"
// }}

/**
 * Class generated from <tt>messages/Timer.msg:26</tt> by opp_msgtool.
 * <pre>
 * packet Timer
 * {
 *     int timerType \@enum(TimerType);
 *     int receiverPort;
 *     string receiverName;
 *     string messageId;
 * }
 * </pre>
 */
class Timer : public ::omnetpp::cPacket
{
  protected:
    int timerType = 0;
    int receiverPort = 0;
    omnetpp::opp_string receiverName;
    omnetpp::opp_string messageId;

  private:
    void copy(const Timer& other);

  protected:
    bool operator==(const Timer&) = delete;

  public:
    Timer(const char *name=nullptr, short kind=0);
    Timer(const Timer& other);
    virtual ~Timer();
    Timer& operator=(const Timer& other);
    virtual Timer *dup() const override {return new Timer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTimerType() const;
    virtual void setTimerType(int timerType);

    virtual int getReceiverPort() const;
    virtual void setReceiverPort(int receiverPort);

    virtual const char * getReceiverName() const;
    virtual void setReceiverName(const char * receiverName);

    virtual const char * getMessageId() const;
    virtual void setMessageId(const char * messageId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Timer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Timer& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Timer *fromAnyPtr(any_ptr ptr) { return check_and_cast<Timer*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TIMER_M_H

