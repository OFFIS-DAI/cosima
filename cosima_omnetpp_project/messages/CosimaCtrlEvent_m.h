//
// Generated file, do not edit! Created by opp_msgtool 6.0 from messages/CosimaCtrlEvent.msg.
//

#ifndef __COSIMACTRLEVENT_M_H
#define __COSIMACTRLEVENT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class CosimaCtrlEvent;
// cplusplus {{
#include "ControlType_m.h"
// }}

/**
 * Class generated from <tt>messages/CosimaCtrlEvent.msg:21</tt> by opp_msgtool.
 * <pre>
 * packet CosimaCtrlEvent
 * {
 *     int ctrlType \@enum(ControlType);
 *     string source;
 *     string destination;
 *     int start;
 *     int stop;
 *     int interval;
 *     int packetLength;
 *     string moduleNames[];
 * }
 * </pre>
 */
class CosimaCtrlEvent : public ::omnetpp::cPacket
{
  protected:
    int ctrlType = 0;
    omnetpp::opp_string source;
    omnetpp::opp_string destination;
    int start = 0;
    int stop = 0;
    int interval = 0;
    int packetLength = 0;
    omnetpp::opp_string *moduleNames = nullptr;
    size_t moduleNames_arraysize = 0;

  private:
    void copy(const CosimaCtrlEvent& other);

  protected:
    bool operator==(const CosimaCtrlEvent&) = delete;

  public:
    CosimaCtrlEvent(const char *name=nullptr, short kind=0);
    CosimaCtrlEvent(const CosimaCtrlEvent& other);
    virtual ~CosimaCtrlEvent();
    CosimaCtrlEvent& operator=(const CosimaCtrlEvent& other);
    virtual CosimaCtrlEvent *dup() const override {return new CosimaCtrlEvent(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getCtrlType() const;
    virtual void setCtrlType(int ctrlType);

    virtual const char * getSource() const;
    virtual void setSource(const char * source);

    virtual const char * getDestination() const;
    virtual void setDestination(const char * destination);

    virtual int getStart() const;
    virtual void setStart(int start);

    virtual int getStop() const;
    virtual void setStop(int stop);

    virtual int getInterval() const;
    virtual void setInterval(int interval);

    virtual int getPacketLength() const;
    virtual void setPacketLength(int packetLength);

    virtual void setModuleNamesArraySize(size_t size);
    virtual size_t getModuleNamesArraySize() const;
    virtual const char * getModuleNames(size_t k) const;
    virtual void setModuleNames(size_t k, const char * moduleNames);
    virtual void insertModuleNames(size_t k, const char * moduleNames);
    [[deprecated]] void insertModuleNames(const char * moduleNames) {appendModuleNames(moduleNames);}
    virtual void appendModuleNames(const char * moduleNames);
    virtual void eraseModuleNames(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CosimaCtrlEvent& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CosimaCtrlEvent& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline CosimaCtrlEvent *fromAnyPtr(any_ptr ptr) { return check_and_cast<CosimaCtrlEvent*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __COSIMACTRLEVENT_M_H

